{"version":3,"sources":["../main.js"],"names":["pkg","name","version","match","find","didMatchVersion","versions","some","range","satisfies","onMatchFound","after","matches","scopedPackage","getPnpmfileScopedName","console","warn","log","rp","require","default","push","length","cmd","pkgs","map","m","join"],"mappings":";;;;;;kBAQe,UAASA,GAAT,EAAc;AAC3B,QAAM,EAACC,IAAD,EAAOC,OAAP,KAAkBF,GAAxB;AACA,QAAMG,QAAQ,sCAAeC,IAAf,CAAoB,EAACH,IAAD,EAApB,CAAd;AACA,MAAI,CAACE,KAAL,EAAY;AACZ,QAAME,kBAAkB,sBAAEF,MAAMG,QAAR,EAAkBC,IAAlB,CAAuBC,SAAS;AACtD,WAAO,iBAAOC,SAAP,CAAiBP,OAAjB,EAA0BM,KAA1B,CAAP;AACD,GAFuB,CAAxB;AAGA,MAAIH,eAAJ,EAAqBK,aAAaV,GAAb;AACtB,C;;QAoBeW,K,GAAAA,K;;AApChB;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAMC,UAAU,EAAhB;;AAYA,SAASF,YAAT,CAAsBV,GAAtB,EAA2B;AACzB,QAAMa,gBAAgBC,sBAAsBd,GAAtB,CAAtB;AACAe,UAAQC,IAAR,CAAc,gCAA+BhB,IAAIC,IAAK,GAAtD;AACAc,UAAQE,GAAR,CAAY,gBAAZ,EAA8BJ,aAA9B;AACA,MAAI,0BAAWA,aAAX,CAAJ,EAA+B;AAC7BE,YAAQE,GAAR,CAAY,WAAZ;AACA,UAAMC,KAAKC,QAAQN,aAAR,EAAuBO,OAAlC;AACAL,YAAQE,GAAR,CAAY,MAAZ,EAAoBC,EAApB,EAAwBlB,GAAxB;AACA;AACD;AACDe,UAAQC,IAAR,CAAc,oCAAmCH,aAAc,EAA/D;AACAD,UAAQS,IAAR,CAAarB,GAAb;AACD;;AAED,SAASc,qBAAT,CAA+Bd,GAA/B,EAAoC;AAClC,SAAQ,aAAY,+BAAOA,IAAIC,IAAX,CAAiB,EAArC;AACD;;AAEM,SAASU,KAAT,GAAiB;AACtB,MAAI,CAACC,QAAQU,MAAb,EAAqB;AACrBP,UAAQE,GAAR,CAAY,+CAAZ;AACAF,UAAQE,GAAR,CAAY,0CAAZ;AACA,QAAMM,MAAM,eAAZ;AACA,QAAMC,OAAOZ,QAAQa,GAAR,CAAYC,KAAK;AAC5B,WAAOZ,sBAAsBY,CAAtB,CAAP;AACD,GAFY,EAEVC,IAFU,CAEL,GAFK,CAAb;AAGAZ,UAAQE,GAAR,CAAYM,MAAMC,IAAlB;AACD","file":"main.js","sourcesContent":["import semver from 'semver'\nimport packageList from './list.generated'\nimport _ from 'lodash'\nimport {escape, unescape} from './escape-package-name'\nimport tryResolve from 'try-resolve'\n\nconst matches = []\n\nexport default function(pkg) {\n  const {name, version} = pkg\n  const match = _(packageList).find({name})\n  if (!match) return\n  const didMatchVersion = _(match.versions).some(range => {\n    return semver.satisfies(version, range)\n  })\n  if (didMatchVersion) onMatchFound(pkg)\n}\n\nfunction onMatchFound(pkg) {\n  const scopedPackage = getPnpmfileScopedName(pkg)\n  console.warn(`Incompatible package found: '${pkg.name}'`)\n  console.log('Trying to use:', scopedPackage)\n  if (tryResolve(scopedPackage)) {\n    console.log('Patching.')\n    const rp = require(scopedPackage).default\n    console.log('here', rp, pkg)\n    //require('pnpmfile-read-package-json')(rp)(pkg)\n  }\n  console.warn(`Not found. Please run: pnpm i -D ${scopedPackage}`)\n  matches.push(pkg)\n}\n\nfunction getPnpmfileScopedName(pkg) {\n  return `@pnpmfile/${escape(pkg.name)}`\n}\n\nexport function after() {\n  if (!matches.length) return\n  console.log('The following packages have issues with pnpm.')\n  console.log('You must install the following packages:')\n  const cmd = 'pnpm install '\n  const pkgs = matches.map(m => {\n    return getPnpmfileScopedName(m)\n  }).join(' ')\n  console.log(cmd + pkgs)\n}\n"]}