{"version":3,"sources":["../../scripts/build.js"],"names":["dest","process","cwd","console","log","json","test","packages","sync","onlyDirectories","absolute","ignore","out","map","p","name","basename","versionArray","require","default","isArray","error","versions","versionRange","writeFileSync","JSON","stringify"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,OAAO,gBAAKC,QAAQC,GAAR,EAAL,EAAoB,6CAApB,CAAb;;AAEAC,QAAQC,GAAR,CAAY,iCAAZ,EAA+CJ,IAA/C;;AAEA,MAAMK,OAAO;AACXC,QAAM;AADK,CAAb;;AAIA,MAAMC,WAAW,iBAAKC,IAAL,CAAU,YAAV,EAAwB;AACvCC,mBAAiB,IADsB;AAEvCC,YAAU,IAF6B;AAGvCC,UAAQ,CACN,yBADM,EAEN,qCAFM,EAGN,oBAHM;AAH+B,CAAxB,CAAjB;AAUAR,QAAQC,GAAR,CAAY,EAACG,QAAD,EAAZ;;AAEA,MAAMK,MAAML,SAASM,GAAT,CAAaC,KAAK;AAC5B,QAAMC,OAAO,eAAKC,QAAL,CAAcF,CAAd,CAAb;AACA,QAAMG,eAAeC,QAAQJ,CAAR,EAAWK,OAAhC;AACA,MAAI,CAAC,iBAAEC,OAAF,CAAUH,YAAV,CAAL,EAA8B;AAC5Bd,YAAQkB,KAAR,CAAc,8BAAd,EAA8CN,IAA9C;AACA;AACD;AACD,QAAMO,WAAW,CAACL,gBAAgB,EAAjB,EAAqBJ,GAArB,CAAyBC,KAAKA,EAAES,YAAhC,CAAjB;AACA,SAAO,EAACR,MAAM,iCAASA,IAAT,CAAP,EAAuBO,QAAvB,EAAP;AACD,CATW,CAAZ;;AAWAnB,QAAQC,GAAR,CAAYQ,GAAZ;AACA,aAAGY,aAAH,CAAiBxB,IAAjB,EAAuByB,KAAKC,SAAL,CAAed,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAvB","file":"build.js","sourcesContent":["\n\nimport fs from 'fs'\nimport glob from 'globby'\nimport path, {join} from 'path'\nimport {escape, unescape} from '../escape-package-name'\nimport _ from 'lodash'\n\nconst dest = join(process.cwd(), 'packages/pnpmfile-check/list.generated.json')\n\nconsole.log('Compiling supported packages to', dest)\n\nconst json = {\n  test: '1',\n}\n\nconst packages = glob.sync('packages/*', {\n  onlyDirectories: true,\n  absolute: true,\n  ignore: [\n    'packages/pnpmfile-check',\n    'packages/pnpmfile-read-package-json',\n    '**/node_modules/**',\n    // TODO(vjpr): Starts with `preset-`.\n  ],\n})\nconsole.log({packages})\n\nconst out = packages.map(p => {\n  const name = path.basename(p)\n  const versionArray = require(p).default\n  if (!_.isArray(versionArray)) {\n    console.error('Needs to be array in package', name)\n    return\n  }\n  const versions = (versionArray || []).map(p => p.versionRange)\n  return {name: unescape(name), versions}\n})\n\nconsole.log(out)\nfs.writeFileSync(dest, JSON.stringify(out, null, 2))\n"]}