{"version":3,"sources":["../index.js"],"names":["debug","shouldPrintDiff","module","exports","entries","pkg","rootPkg","Error","key","entry","Object","name","version","matchAll","satisfies","allowed","originalPkg","cloneDeep","obj","pick","merge","before","after","printDiff","delta","str","map","part","color","added","removed","value","join","length"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,QAAQ,qBAAM,4BAAN,CAAd;;AAEA;AACA,MAAMC,kBAAkB,IAAxB;;AAEAC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACjC,SAAO,UAASC,GAAT,EAAcC,OAAd,EAAuB;AAC5B,QAAI,CAACA,OAAL,EAAc,MAAM,IAAIC,KAAJ,CAAW,iEAAX,CAAN;AACd,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,OAAON,OAAP,CAAeA,OAAf,CAA3B,EAAoD;AAClD,UAAI,EAACO,IAAD,EAAOC,OAAP,KAAkB,gCAAiBJ,GAAjB,CAAtB;AACA;AACA;AACA,UAAIK,WAAW,KAAf;AACA,UAAID,YAAY,EAAhB,EAAoBC,WAAW,IAAX;AACpB,UAAIL,QAAQ,QAAZ,EAAsB;AACpB;AACAG,eAAOL,OAAP;AACD;;AAED;AACA,UAAIK,SAASN,IAAIM,IAAjB,EAAuB;AACrB,YAAIE,YAAY,iBAAOC,SAAP,CAAiBT,IAAIO,OAArB,EAA8BA,OAA9B,CAAhB,EAAwD;AACtD,gBAAMG,UAAU,CACd,cADc,EAEd,iBAFc,EAGd,kBAHc,CAAhB;AAKA,gBAAMC,cAAc,iBAAEC,SAAF,CAAYZ,GAAZ,CAApB;AACA,gBAAMa,MAAM,iBAAEC,IAAF,CAAOV,KAAP,EAAcM,OAAd,CAAZ;AACA,2BAAEK,KAAF,CAAQf,GAAR,EAAaa,GAAb,EARsD,CAQpC;AAClB,gBAAMG,SAAS,iBAAEF,IAAF,CAAOH,WAAP,EAAoBD,OAApB,CAAf;AACA,gBAAMO,QAAQ,iBAAEH,IAAF,CAAOd,GAAP,EAAYU,OAAZ,CAAd;AACA,cAAId,eAAJ,EAAqBsB,UAAUlB,GAAV,EAAegB,MAAf,EAAuBC,KAAvB;;AAErB;AACA;AACD;AACF;AACF;AACF,GAjCD;AAkCD,CAnCD;;AAqCA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,SAAT,CAAmBlB,GAAnB,EAAwBgB,MAAxB,EAAgCC,KAAhC,EAAuC;AACrC,QAAME,QAAQ,oBAASH,MAAT,EAAiBC,KAAjB,CAAd;AACA,QAAMG,MAAMD,MAAME,GAAN,CAAUC,QAAQ;AAC5B,QAAIC,QAAQD,KAAKE,KAAL,GAAa,OAAb,GAAuBF,KAAKG,OAAL,GAAe,KAAf,GAAuB,MAA1D;AACA,WAAO,gBAAMF,KAAN,EAAaD,KAAKI,KAAlB,CAAP;AACD,GAHW,EAGTC,IAHS,CAGJ,EAHI,CAAZ;AAIA,MAAIR,MAAMS,MAAV,EAAkB;AAChBjC,UAAO,aAAYK,IAAIM,IAAK,GAA5B;AACAX,UAAMyB,GAAN;AACD;AACF","file":"index.js","sourcesContent":["import semver from 'semver'\nimport parsePackageName from 'parse-package-name'\nimport path, {join} from 'path'\nimport _ from 'lodash'\nimport Debug from 'debug'\nimport {diffJson} from 'diff'\nimport chalk from 'chalk'\n\nconst debug = Debug('pnpmfile-read-package-json')\n\n// Using `debug`.\nconst shouldPrintDiff = true\n\nmodule.exports = function(entries) {\n  return function(pkg, rootPkg) {\n    if (!rootPkg) throw new Error(`You must pass the 'rootPkg' arg to 'pnpmfile-read-package-json'`)\n    for (const [key, entry] of Object.entries(entries)) {\n      let {name, version} = parsePackageName(key)\n      // TODO(vjpr): '' is a valid range I think according to https://semver.npmjs.com/.\n      // TODO(vjpr): '' and '*' never match pre-release versions. Should we introduce syntax to match all versions including pre-release?\n      let matchAll = false\n      if (version === '') matchAll = true\n      if (key === '<root>') {\n        //name = getRootPackageName()\n        name = rootPkg\n      }\n\n      // TODO(vjpr): We need to find the best version to replace. Maybe sort by semver beforehand.\n      if (name === pkg.name) {\n        if (matchAll || semver.satisfies(pkg.version, version)) {\n          const allowed = [\n            'dependencies',\n            'devDependencies',\n            'peerDependencies',\n          ]\n          const originalPkg = _.cloneDeep(pkg)\n          const obj = _.pick(entry, allowed)\n          _.merge(pkg, obj) // Mutates!\n          const before = _.pick(originalPkg, allowed)\n          const after = _.pick(pkg, allowed)\n          if (shouldPrintDiff) printDiff(pkg, before, after)\n\n          // TODO(vjpr): Support callback function for custom changes.\n          break\n        }\n      }\n    }\n  }\n}\n\n//function getRootPackageName() {\n//  // NOTE: `process.cwd()` won't be correct when running `pnpm recursive link`.\n//  //   Instead we just pass it in for now.\n//  const pjson = require(join(process.cwd(), 'package.json'))\n//  return pjson.name\n//}\n\nfunction printDiff(pkg, before, after) {\n  const delta = diffJson(before, after)\n  const str = delta.map(part => {\n    var color = part.added ? 'green' : part.removed ? 'red' : 'grey'\n    return chalk[color](part.value)\n  }).join('')\n  if (delta.length) {\n    debug(`Modified '${pkg.name}'`)\n    debug(str)\n  }\n}\n"]}