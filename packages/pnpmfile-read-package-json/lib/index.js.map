{"version":3,"sources":["../index.js"],"names":["entries","pkg","key","entry","Object","name","version","getRootPackageName","satisfies","allowed","originalPkg","cloneDeep","obj","pick","merge","before","after","shouldPrintDiff","printDiff","debug","pjson","require","process","cwd","delta","str","map","part","color","added","removed","value","join","length"],"mappings":";;;;;;kBAae,UAASA,OAAT,EAAkB;AAC/B,SAAO,UAASC,GAAT,EAAc;AACnB,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,OAAOJ,OAAP,CAAeA,OAAf,CAA3B,EAAoD;AAClD,UAAI,EAACK,IAAD,EAAOC,OAAP,KAAkB,gCAAiBJ,GAAjB,CAAtB;AACA,UAAII,YAAY,EAAhB,EAAoBA,UAAU,GAAV;AACpB,UAAIJ,QAAQ,QAAZ,EAAsB;AACpBG,eAAOE,oBAAP;AACD;;AAED;AACA,UAAIF,SAASJ,IAAII,IAAjB,EAAuB;AACrB,YAAI,iBAAOG,SAAP,CAAiBP,IAAIK,OAArB,EAA8BA,OAA9B,CAAJ,EAA4C;AAC1C,gBAAMG,UAAU,CACd,cADc,EAEd,iBAFc,EAGd,kBAHc,CAAhB;AAKA,gBAAMC,cAAc,iBAAEC,SAAF,CAAYV,GAAZ,CAApB;AACA,gBAAMW,MAAM,iBAAEC,IAAF,CAAOV,KAAP,EAAcM,OAAd,CAAZ;AACA,2BAAEK,KAAF,CAAQb,GAAR,EAAaW,GAAb,EAR0C,CAQxB;AAClB,gBAAMG,SAAS,iBAAEF,IAAF,CAAOH,WAAP,EAAoBD,OAApB,CAAf;AACA,gBAAMO,QAAQ,iBAAEH,IAAF,CAAOZ,GAAP,EAAYQ,OAAZ,CAAd;AACA,cAAIQ,eAAJ,EAAqBC,UAAUjB,GAAV,EAAec,MAAf,EAAuBC,KAAvB;;AAErB;AACA;AACD;AACF;AACF;AACF,GA5BD;AA6BD,C;;AA3CD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAMG,QAAQ,qBAAM,4BAAN,CAAd;;AAEA;AACA,MAAMF,kBAAkB,IAAxB;;AAkCA,SAASV,kBAAT,GAA8B;AAC5B,QAAMa,QAAQC,QAAQ,gBAAKC,QAAQC,GAAR,EAAL,EAAoB,cAApB,CAAR,CAAd;AACA,SAAOH,MAAMf,IAAb;AACD;;AAED,SAASa,SAAT,CAAmBjB,GAAnB,EAAwBc,MAAxB,EAAgCC,KAAhC,EAAuC;AACrC,QAAMQ,QAAQ,oBAAST,MAAT,EAAiBC,KAAjB,CAAd;AACA,QAAMS,MAAMD,MAAME,GAAN,CAAUC,QAAQ;AAC5B,QAAIC,QAAQD,KAAKE,KAAL,GAAa,OAAb,GAAuBF,KAAKG,OAAL,GAAe,KAAf,GAAuB,MAA1D;AACA,WAAO,gBAAMF,KAAN,EAAaD,KAAKI,KAAlB,CAAP;AACD,GAHW,EAGTC,IAHS,CAGJ,EAHI,CAAZ;AAIA,MAAIR,MAAMS,MAAV,EAAkB;AAChBd,UAAO,aAAYlB,IAAII,IAAK,GAA5B;AACAc,UAAMM,GAAN;AACD;AACF","file":"index.js","sourcesContent":["import semver from 'semver'\nimport parsePackageName from 'parse-package-name'\nimport path, {join} from 'path'\nimport _ from 'lodash'\nimport Debug from 'debug'\nimport {diffJson} from 'diff'\nimport chalk from 'chalk'\n\nconst debug = Debug('pnpmfile-read-package-json')\n\n// Using `debug`.\nconst shouldPrintDiff = true\n\nexport default function(entries) {\n  return function(pkg) {\n    for (const [key, entry] of Object.entries(entries)) {\n      let {name, version} = parsePackageName(key)\n      if (version === '') version = '*'\n      if (key === '<root>') {\n        name = getRootPackageName()\n      }\n\n      // TODO(vjpr): We need to find the best version to replace. Maybe sort by semver beforehand.\n      if (name === pkg.name) {\n        if (semver.satisfies(pkg.version, version)) {\n          const allowed = [\n            'dependencies',\n            'devDependencies',\n            'peerDependencies',\n          ]\n          const originalPkg = _.cloneDeep(pkg)\n          const obj = _.pick(entry, allowed)\n          _.merge(pkg, obj) // Mutates!\n          const before = _.pick(originalPkg, allowed)\n          const after = _.pick(pkg, allowed)\n          if (shouldPrintDiff) printDiff(pkg, before, after)\n\n          // TODO(vjpr): Support callback function for custom changes.\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction getRootPackageName() {\n  const pjson = require(join(process.cwd(), 'package.json'))\n  return pjson.name\n}\n\nfunction printDiff(pkg, before, after) {\n  const delta = diffJson(before, after)\n  const str = delta.map(part => {\n    var color = part.added ? 'green' : part.removed ? 'red' : 'grey'\n    return chalk[color](part.value)\n  }).join('')\n  if (delta.length) {\n    debug(`Modified '${pkg.name}'`)\n    debug(str)\n  }\n}\n"]}